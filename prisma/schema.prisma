// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model admin {
  id       String @id @default(uuid())
  userName String
  password String
}

model user{
  id       String @id @default(uuid())
  userName String
  password String
  phoneNumber String
  farmer farmer?
  buyer buyer?

}

model farmer {
  id              String                       @id @default(uuid())
  profiilePicture String
  farmName        String
  pondSize        Int
  fiscalYear      String
  active          Boolean
  approved        Boolean
  user user @relation(fields: [userId],references: [id])
  userId String @unique
  location location?
  buyerRequest    buyerRequest                 @relation(fields: [buyerRequestId], references: [id])
  buyerRequestId  String                       @unique
  farmerDocument  documentForFarmer?
  issues          helpAndSupportFarmerIssues[]
  farmerSupply     farmerSupply[]
}

model location{
  id               String                      @id @default(uuid())
   pradesh         String
  district        String
  nagarpalika    String?
  mahaNagarpalika    String?
  upaMahaNagarpalika String?
  gaupalika           String?
  Woda            Int
  farmer farmer @relation(fields: [farmerId],references: [id])
  farmerId String @unique
  buyer buyer @relation(fields: [buyerId],references: [id])
  buyerId String @unique
}

model buyer {
  id               String                      @id @default(uuid())
  organizationName String? //optional
  profiilePicture  String
  fiscalYear       String
  active           Boolean
  approved         Boolean
   user user @relation(fields: [userId],references: [id])
  userId String @unique
  issues           helpAndSupportBuyerIssues[]
  buyerProposal    buyerRequest[]
    location location?
    buyerForm buyerForm?
}

model documentForFarmer {
  id             String @id @default(uuid())
  idenfication String[]
  registration String[]
  farmerId       String @unique
  farmer         farmer @relation(fields: [farmerId], references: [id])
}


model helpAndSupportFarmerIssues {
  id       String   @id @default(uuid())
  issue    String
  time     DateTime @updatedAt //what is the time at the time of publishment
  farmerId String?  @unique
  farmer   farmer?  @relation(fields: [farmerId], references: [id]) 
}

model helpAndSupportBuyerIssues {
  id      String   @id @default(uuid())
  issue   String
  time    DateTime @updatedAt //what is the time at the time of publishment   
  buyerId String?  @unique
  buyer   buyer?   @relation(fields: [buyerId], references: [id])

}

model farmerSupply {
  id          String   @id @default(uuid())
  fishType String
  avgWeight Int
  requiredDate DateTime
  location  String
  contact String
  totalWeight Int 
  time        DateTime @updatedAt
  farmer      farmer   @relation(fields: [farmerId], references: [id])
  farmerId    String   @unique
buyerForm buyerForm?
}

model buyerRequest {
  id          String   @id @default(uuid())
  time        DateTime @updatedAt
  fishType String
  avgWeight Int
  requiredDate DateTime
  location  String
  contact String
  totalWeight Int 
  buyer       buyer    @relation(fields: [buyerId], references: [id])
  buyerId     String   @unique
  farmer      farmer[]
}

model buyerForm{
    id          String   @id @default(uuid())
    quantity Int
    contact String
    farmerSupply farmerSupply @relation(fields: [farmerSupplyId], references: [id])
    farmerSupplyId String @unique
    buyer buyer @relation(fields: [buyerId], references: [id])
    buyerId String @unique
}
